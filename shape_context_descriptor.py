# -*- coding: utf-8 -*-
"""Shape_Context_Descriptor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UMITH3NEaEMQBLrHZY0TNDDOJLWHcWxO
"""

pip install libsvm

"""Imports"""

import cv2
import numpy as np
from keras.datasets import mnist
import math
import matplotlib.pyplot as plt
from libsvm.svmutil import *

"""Functions"""

def Create_Histogam(data):
  histogram = np.zeros(10)
  for i in range(10):
    histogram[i] = np.sum(data==i)
  return histogram

def plot_func(x,y,plt_file,plt_title):
  plt.plot(x, y, color='red', marker='o', markerfacecolor='red', markersize=3)
  plt.ylabel(f'{plt_title}')
  plt.title(f'{plt_title}')
  plt.grid()
  plt.savefig(plt_file)
  plt.close()
  return

def Find_contour_points(data):
  contour_points = np.zeros((len(data),avg_cont_num,2))
  for i in range(len(data)):
    img = data[i]
    ret, thresh = cv2.threshold(img, 127, 255, 0)
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    sorted_contours= sorted(contours, key=cv2.contourArea, reverse= True)[0]
    if len(sorted_contours)>=avg_cont_num:
      contour_points[i] = sorted_contours[:avg_cont_num].reshape((avg_cont_num,2))
    else:
      q,r = divmod(avg_cont_num, len(sorted_contours))
      sorted_contours = sorted_contours.reshape((-1,2))
      repeated_contours = sorted_contours.copy()
      for i in range(1,q):
        repeated_contours = cv2.vconcat([repeated_contours, sorted_contours])
      repeated_contours = cv2.vconcat([repeated_contours, sorted_contours[:r]])
      contour_points[i] = repeated_contours
  return contour_points

def Find_norm(points):
  norm = np.zeros((len(points),avg_cont_num,avg_cont_num))
  for i in range(len(points)):
    for j in range(avg_cont_num):
        norm[i,j] = np.linalg.norm(points[i]-points[i,j],axis=1)
    norm[i] = norm[i] / norm[i].mean()
  return norm

def Find_angle(points):
  angle = np.zeros((len(points),avg_cont_num,avg_cont_num))
  for i in range(len(points)):
    for j in range(avg_cont_num):
        angle[i,j] = np.arctan2(points[i,:,1]-points[i,j,1],points[i,:,0]-points[i,j,0])/math.pi*180
  return angle

def Create_Histogram(num,norm,angle):
  r_bins = 5
  angle_bins = 12
  r_array  = np.array([0, 0.125, 0.25, 0.5, 1, 2])
  angle_array = np.zeros(angle_bins+1)
  for i in range(angle_bins+1):
    angle_array[i] = -180 + i * 30
  Histogram = np.zeros((num,r_bins,angle_bins))
  for k in range(num):
    for i in range(r_bins):
      for j in range(angle_bins):
        Histogram[k,i,j] = len(np.where(((norm[k]>=r_array[i])*1) * ((norm[k]<r_array[i+1])*1) * ((angle[k]>=angle_array[j])*1) * ((angle[k]<angle_array[j+1])*1))[0])
  return Histogram

def Create_data_label(data,label,dim,start,stop):
  New_data = np.zeros((1,dim),dtype=data.dtype)
  New_label = np.zeros((1,1),dtype=label.dtype)
  for i in range(10):
      sample = np.where(label==i)[0][start:stop]
      d = data[sample]
      l = np.ones((stop-start,1),dtype=np.uint8)*i
      New_label = cv2.vconcat([New_label,l])
      New_data = cv2.vconcat([New_data,d])
  New_data = np.delete(New_data,0,0)
  New_label = np.delete(New_label,0,0)
  New_label = New_label.reshape([(stop-start)*10])
  return New_data,New_label

"""Loading Data"""

(TrainX, TrainY), (TestX, TestY) = mnist.load_data()
train_histogram = Create_Histogam(TrainY)
plot_func(range(0,10),train_histogram,'mnist_train_histogram.jpg','train_histogram')
test_histogram = Create_Histogam(TestY)
plot_func(range(0,10),test_histogram,'mnist_test_histogram.jpg','test_histogram')

"""Finding average contour points"""

avg_cont_num = 0
for i in range(len(TrainX)):
  img = TrainX[i]
  ret, thresh = cv2.threshold(img, 127, 255, 0)
  contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
  sorted_contours= sorted(contours, key=cv2.contourArea, reverse= True)[0]
  avg_cont_num += len(sorted_contours)
avg_cont_num /= len(TrainX)
avg_cont_num = int(avg_cont_num)
avg_cont_num

"""Create a set of n node in each image"""

contour_points_TrainX = Find_contour_points(TrainX)
contour_points_TestX = Find_contour_points(TestX)

"""Calulate distance norm"""

norm_TrainX = Find_norm(contour_points_TrainX)
norm_TestX = Find_norm(contour_points_TestX)

"""Calculate angle"""

angle_TrainX = Find_angle(contour_points_TrainX)
angle_TestX = Find_angle(contour_points_TestX)

"""Create Histogram"""

Histogram_TrainX = Create_Histogram(len(norm_TrainX),norm_TrainX,angle_TrainX)
Histogram_TestX = Create_Histogram(len(norm_TestX),norm_TestX,angle_TestX)

"""Reshape each histogram to a vector"""

Histogram_TrainX_reshaped = Histogram_TrainX.reshape((len(norm_TrainX),-1))
Histogram_TestX_reshaped = Histogram_TestX.reshape((len(norm_TestX),-1))

"""Create train, validation, test data"""

n = (Histogram_TrainX_reshaped.shape)[1]
train_X,train_Y = Create_data_label(Histogram_TrainX_reshaped,TrainY,n,0,1000)
validation_X,validation_Y = Create_data_label(Histogram_TrainX_reshaped,TrainY,n,1000,1500)
test_X,test_Y = Create_data_label(Histogram_TestX_reshaped,TestY,n,0,500)

sample_train_histogram = Create_Histogam(train_Y)
plot_func(range(0,10),sample_train_histogram,'train_histogram.jpg','train_histogram')
sample_validation_histogram = Create_Histogam(validation_Y)
plot_func(range(0,10),sample_validation_histogram,'validation_histogram.jpg','validation_histogram')
sample_test_histogram = Create_Histogam(test_Y)
plot_func(range(0,10),sample_test_histogram,'test_histogram.jpg','test_histogram')

"""Find the best parameter to get the most precision"""

prob  = svm_problem(train_Y, train_X)
Best_C = 0
Best_gamma = 0
Best_p = 0
for C in range(1,10):
  for gamma in range(1,10):
    param = svm_parameter(f'-s 0 -t 2 -g {gamma/1000} -c {C}')
    m = svm_train(prob, param)
    print(f'gamma is {gamma/1000} and C is {C}')
    p_label, p_acc, p_val = svm_predict(validation_Y, validation_X, m)
    p = p_acc[0]
    if p > Best_p:
      Best_p = p
      Best_C = C
      Best_gamma = gamma/1000
print(f'Highest precision is {Best_p}.')
print(f'Best C is {Best_C}.')
print(f'Best gamma is {Best_gamma}.')

"""Set the final parameters"""

print("If you want to set a new C, press c")
print("If you want to set a new gamma, press g")
print("If you want to set both gamma and c, press t")
print("Otherwise, press any key.")
print("key: ")
word = input()
if word == 'c' or word == 'C':
  print("Enter the new c.")
  print("c: ")
  c = int(input())
elif word == 'g' or word == 'G':
  print("Enter the new gamma.")
  print("g: ")
  g = float(input())
elif word == 't' or word == 'T':
  print("Enter the new c.")
  print("c: ")
  c = int(input())
  print("Enter the new gamma.")
  print("g: ")
  g = float(input())
else:
  c = Best_C
  g = Best_gamma

"""Finilize the model with best parameters"""

train_X,train_Y = Create_data_label(Histogram_TrainX_reshaped,TrainY,n,0,int(np.min(train_histogram)))
test_X,test_Y = Histogram_TestX_reshaped,TestY
prob  = svm_problem(train_Y, train_X)
param = svm_parameter(f'-s 0 -t 2 -g {g} -c {c} -b 1')
m = svm_train(prob, param)

"""Precision on train data"""

p_label, p_acc, p_val = svm_predict(train_Y, train_X, m, options='-b 1')

"""Precision on test data"""

p_label, p_acc, p_val = svm_predict(test_Y, test_X, m, options='-b 1')