# -*- coding: utf-8 -*-
"""SVM_Mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v4jZUb-pqb7E51X02oCSjhwLwmu-yrvP
"""

pip install libsvm

"""Importing and functions"""

from keras.datasets import mnist
import matplotlib.pyplot as plt
import cv2
import numpy as np
from sklearn.decomposition import PCA
from libsvm.svmutil import *

# function to plot figures
def plot_func(x,y,plt_file,plt_title):
  plt.plot(x, y, color='red', marker='o', markerfacecolor='red', markersize=3)
  plt.ylabel(f'{plt_title}')
  plt.title(f'{plt_title}')
  plt.grid()
  plt.savefig(plt_file)
  plt.close()
  return

# function to create histogram of data labels
def Create_Histogam(data):
  histogram = np.zeros(10)
  for i in range(10):
    histogram[i] = np.sum(data==i)
  return histogram

# function to sort and select data and labels
def Create_data_label(data,label,dim,start,stop):
  New_data = np.zeros((1,dim),dtype=data.dtype)
  New_label = np.zeros((1,1),dtype=label.dtype)
  for i in range(10):
      sample = np.where(label==i)[0][start:stop]
      d = data[sample]
      l = np.ones((stop-start,1),dtype=np.uint8)*i
      New_label = cv2.vconcat([New_label,l])
      New_data = cv2.vconcat([New_data,d])
  New_data = np.delete(New_data,0,0)
  New_label = np.delete(New_label,0,0)
  New_label = New_label.reshape([(stop-start)*10])
  return New_data,New_label

# function to create histogram of probability
def Create_Histogram_Probability(prob,predict,true_label):
  False_Pred_index = np.where(predict!=true_label)[0]
  prob = np.array(prob)
  false_pred = prob[False_Pred_index]
  false_prob = np.max(false_pred,axis=1)
  Histogram = np.zeros([100//5])
  jump = 5
  for i in range(1,100//jump+1):
    Histogram[i-1] = np.sum((false_prob< i*jump/100)*(false_prob> (i-1)*jump/100))
  Histogram /= np.size(False_Pred_index)
  return Histogram

"""Loading Data

"""

(TrainX, TrainY), (TestX, TestY) = mnist.load_data()

train_histogram = Create_Histogam(TrainY)
plot_func(range(0,10),train_histogram,'mnist_train_histogram.jpg','train_histogram')
test_histogram = Create_Histogam(TestY)
plot_func(range(0,10),test_histogram,'mnist_test_histogram.jpg','test_histogram')
train_samples = len(TrainX)
trainX = TrainX.reshape((train_samples,-1)).astype(np.float64)
test_samples = len(TestX)
testX = TestX.reshape((test_samples,-1)).astype(np.float64)
dim = (trainX.shape)[1]

TrainX.shape

"""convert to zero mean and one variance"""

for i in range(train_samples):
  trainX[i] = (trainX[i]-np.mean(trainX[i]))/np.std(trainX[i])
for i in range(test_samples):
  testX[i] = (testX[i]-np.mean(testX[i]))/np.std(testX[i])

"""Find n_component of PCA for variance = 0.99"""

variance = np.zeros((dim-1))
pca = PCA(n_components=dim)
pca.fit(trainX)
var = pca.explained_variance_ratio_
variance[0] = var[0] + var[1]
for i in range(1,dim-1):
  variance[i] = variance[i-1] + var[i+1]

plot_func(range(2,dim+1),variance,'variance.jpg','variance')
n = np.where(variance>0.99)[0][0]
print(f'For having at least 0.99 variance, We need n_component of PCA to be {n}.')

"""Set the n_component"""

print("If you want to set a new n_component, press n.")
print("Otherwise, press any key.")
print("key: ")
word = input()
if word == 'n' or word == 'N':
  print("Enter the new n_component.")
  print("n_component: ")
  n = int(input())

"""Apply the PCA """

pca = PCA(n_components=n)
pca.fit(trainX)
pca_trainX = pca.transform(trainX)
pca_testX = pca.transform(testX)

"""Create samples for tuning the SVM """

train_X,train_Y = Create_data_label(pca_trainX,TrainY,n,0,1000)
validation_X,validation_Y = Create_data_label(pca_trainX,TrainY,n,1000,1500)
test_X,test_Y = Create_data_label(pca_testX,TestY,n,0,500)

sample_train_histogram = Create_Histogam(train_Y)
plot_func(range(0,10),sample_train_histogram,'train_histogram.jpg','train_histogram')
sample_validation_histogram = Create_Histogam(validation_Y)
plot_func(range(0,10),sample_validation_histogram,'validation_histogram.jpg','validation_histogram')
sample_test_histogram = Create_Histogam(test_Y)
plot_func(range(0,10),sample_test_histogram,'test_histogram.jpg','test_histogram')

"""Tuning parameter"""

prob  = svm_problem(train_Y, train_X)
Best_C = 0
Best_gamma = 0
Best_p = 0
for C in range(1,10):
  for gamma in range(1,10):
    param = svm_parameter(f'-s 0 -t 2 -g {gamma/1000} -c {C}')
    m = svm_train(prob, param)
    print(f'gamma is {gamma/1000} and C is {C}')
    p_label, p_acc, p_val = svm_predict(validation_Y, validation_X, m)
    p = p_acc[0]
    if p > Best_p:
      Best_p = p
      Best_C = C
      Best_gamma = gamma/1000
print(f'Highest precision is {Best_p}.')
print(f'Best C is {Best_C}.')
print(f'Best gamma is {Best_gamma}.')

"""set new parameter"""

print("If you want to set a new C, press c")
print("If you want to set a new gamma, press g")
print("If you want to set both gamma and c, press t")
print("Otherwise, press any key.")
print("key: ")
word = input()
if word == 'c' or word == 'C':
  print("Enter the new c.")
  print("c: ")
  c = int(input())
elif word == 'g' or word == 'G':
  print("Enter the new gamma.")
  print("g: ")
  g = float(input())
elif word == 't' or word == 'T':
  print("Enter the new c.")
  print("c: ")
  c = int(input())
  print("Enter the new gamma.")
  print("g: ")
  g = float(input())
else:
  c = Best_C
  g = Best_gamma

"""Final SVM"""

prob  = svm_problem(train_Y, train_X)
param = svm_parameter(f'-s 0 -t 2 -g {g} -c {c} -b 1')
m = svm_train(prob, param)
p_label, p_acc, p_val = svm_predict(validation_Y, validation_X, m,  options='-b 1')
p_label, p_acc, p_val = svm_predict(test_Y, test_X, m,  options='-b 1')

"""Create a Svm with all data with best parameters"""

train_X,train_Y = Create_data_label(pca_trainX,TrainY,n,0,int(np.min(train_histogram)))
test_X,test_Y = pca_testX,TestY
prob  = svm_problem(train_Y, train_X)
param = svm_parameter(f'-s 0 -t 2 -g {g} -c {c} -b 1')
m = svm_train(prob, param)

"""Find Accuracy"""

p_label, p_acc, p_val = svm_predict(train_Y, train_X, m, options='-b 1')
h_train = Create_Histogram_Probability(p_val,p_label,train_Y)

p_label, p_acc, p_val = svm_predict(test_Y, test_X, m, options='-b 1')
h_test = Create_Histogram_Probability(p_val,p_label,test_Y)

"""bar plot for probibility of wrong detection"""

barWidth = 0.3
br1 = np.arange(len(h_train))
br2 = [x + barWidth for x in br1]
fig = plt.figure()
plt.bar(br1, h_train, color ='r', width = barWidth,
        edgecolor ='grey', label ='Train Prob')
plt.bar(br2, h_test, color ='b', width = barWidth,
        edgecolor ='grey', label ='Test Prob')
plt.xticks([r + barWidth/2 for r in range(len(h_train))],
        ['5', '10', '15', '20', '25', '30', '35', '40', '45', '50',
        '55', '60', '65', '70', '75', '80', '85', '90', '95', '100'])
plt.legend()
plt.xlabel('Prob', fontweight ='bold', fontsize = 10)
plt.ylabel('Histogram', fontweight ='bold', fontsize = 10)
plt.savefig('Histogram_of_prob.jpg')
plt.close()

"""Find average time for 10 itation to predict test images"""

import time
sum = 0
iter = 10
for i in range(iter):
  start = time.time()
  p_label, p_acc, p_val = svm_predict(test_Y, test_X, m, options='-b 1')
  end = time.time()
  print(end-start)
  sum += (end-start)

print(f'The average time for predict label of test sample is {sum/iter/test_Y.size}.')

"""Find False Predicted Data"""

try:
  !rm -rf img
  !mkdir img
except:
  !mkdir img

False_Pred_index = np.where(p_label!=test_Y)[0]
f = open("Info.txt","w+")
f.write('{:^15s} '.format("Image name")) 
f.write('{:^15s} '.format("Image label")) 
f.write('{:^15s} '.format("First Guess")) 
f.write('{:^15s} '.format("First Prob")) 
f.write('{:^15s} '.format("Second Guess")) 
f.write('{:^15s} '.format("Second Prob")) 
f.write('{:^15s} '.format("Third Guess")) 
f.write('{:^15s} \n'.format("Third Prob")) 
for i in range(np.size(False_Pred_index)):
  img = TestX[False_Pred_index[i]]
  p = np.array(p_val[False_Pred_index[i]])
  p1 = np.max(p)
  x1 = np.where(p==p1)[0][0]
  p[x1] = 0
  p2 = np.max(p)
  x2 = np.where(p==p2)[0][0]
  p[x2] = 0
  p3 = np.max(p)
  x3 = np.where(p==p3)[0][0]   
  f.write('{:^15s} '.format(f'img_{i}')) 
  f.write('{:^15d} '.format(test_Y[False_Pred_index[i]])) 
  f.write('{:^15d} '.format(x1)) 
  f.write('{:^15f} '.format(p1)) 
  f.write('{:^15d} '.format(x2)) 
  f.write('{:^15f} '.format(p2)) 
  f.write('{:^15d} '.format(x3)) 
  f.write('{:^15f} \n'.format(p3)) 
  file = f'img/img_{i}.jpg'
  cv2.imwrite(file,img)
f.close()