# -*- coding: utf-8 -*-
"""Car_Plate_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MGcDTKeh83fGuKgQTs2c6AFYSMtzq3uC
"""

!git clone https://github.com/Amirhosein-javadi/internship-at-the-Basirtech.git

pip install libsvm

"""Imports"""

import cv2
import glob 
import numpy as np 
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from libsvm.svmutil import *
import random

"""Functions"""

def Create_data_label(fat,tall,car,dim,start,stop):
  New_data = cv2.vconcat([fat[start:stop,:],tall[start:stop,:],car[start:stop,:]])
  New_label = cv2.vconcat([np.zeros([stop-start,1]),np.ones([stop-start,1]),np.ones([stop-start,1])*2])
  New_label = New_label.reshape([-1,])
  return New_data,New_label

def create_data(file):
  img = cv2.imread(file[0],0)
  data = np.zeros((1,img.size)).astype(np.float64)
  for i in range(len(file)):
    name = file[i]
    img = cv2.imread(name,0).astype(np.float64)
    reshaped_img = img.reshape((1,-1))
    data = cv2.vconcat([data,reshaped_img])
  data = np.delete(data, 0, 0)
  return data
  
def plot_func(x,y,plt_file,plt_title):
  plt.plot(x, y, color='red', marker='o', markerfacecolor='red', markersize=3)
  plt.ylabel(f'{plt_title}')
  plt.title(f'{plt_title}')
  plt.grid()
  plt.savefig(plt_file)
  plt.close()
  return

"""Creating folder for images in drive"""

try:
  !rm -rf fat
  !mkdir fat
except:
  !mkdir fat

try:
  !rm -rf tall
  !mkdir tall
except:
  !mkdir tall

try:
  !rm -rf car
  !mkdir car
except:
  !mkdir car

"""Loading and resizing fat plates to size 30*60"""

Filenames1 = glob.glob('/content/internship-at-the-Basirtech/images/fat/*')
for i in range(len(Filenames1)):
    name1 = Filenames1[i]
    img1 = cv2.imread(name1)
    resize_im1 = cv2.resize(img1,(60,30),interpolation = cv2.INTER_AREA)
    new_name1 = f'/content/fat/{i}.jpg'
    cv2.imwrite(new_name1,resize_im1)

"""Loading and resizing tall plates to size 30*60"""

Filenames2 = glob.glob('/content/internship-at-the-Basirtech/images/tall/*')
for i in range(len(Filenames2)):
     name2 = Filenames2[i]
     img2 = cv2.imread(name2)
     resize_im2 = cv2.resize(img2,(60,30),interpolation = cv2.INTER_AREA)
     new_name2 = f'/content/tall/{i}.jpg'
     cv2.imwrite(new_name2,resize_im2)

"""Creating random images from car images"""

filename = glob.glob('/content/internship-at-the-Basirtech/images/car img/*')
k = 1
for i in range(len(filename)):
    name = filename[i]
    img = cv2.imread(name)
    row,col = img.shape[0],img.shape[1]
    for j in range(4):
        random_row = random.randint(100, row-100)
        random_col = random.randint(200, col-200)
        newimg = img[random_row-100:random_row+100,random_col-100:random_col+100]
        newimg = cv2.resize(newimg,(60,30),interpolation = cv2.INTER_AREA)
        new_name = f'car/{k}.jpg'
        cv2.imwrite(new_name,newimg)
        k = k + 1

"""Loading data"""

fat_plates_path = '/content/fat'
fat_image_file = glob.glob(f'{fat_plates_path}/*')
tall_plates_path = '/content/tall'
tall_image_file = glob.glob(f'{tall_plates_path}/*')
car_path = '/content/car'
car_image_file = glob.glob(f'{car_path}/*')

tall_data = create_data(tall_image_file)
fat_data = create_data(fat_image_file)
car_data = create_data(car_image_file)

"""normalizing data to 0 mean and 1 std"""

for i in range(len(tall_data)):
  tall_data[i] = (tall_data[i]-np.mean(tall_data[i]))/np.std(tall_data[i])
for i in range(len(fat_data)):
  fat_data[i] = (fat_data[i]-np.mean(fat_data[i]))/np.std(fat_data[i])
for i in range(len(car_data)):
  car_data[i] = (car_data[i]-np.mean(car_data[i]))/np.std(car_data[i])

"""creating train and validation and test data"""

dim = np.size(fat_data,axis=1)
train_X,train_Y = Create_data_label(fat_data,tall_data,car_data,dim,0,800)
validation_X,validation_Y = Create_data_label(fat_data,tall_data,car_data,dim,800,1000)
test_X,test_Y = Create_data_label(fat_data,tall_data,car_data,dim,1000,1300)

"""Finding the best parameters for SVM"""

prob  = svm_problem(train_Y, train_X)
Best_C = 0
Best_gamma = 0
Best_p = 0
for C in range(1,10):
  for gamma in range(1,10):
    param = svm_parameter(f'-s 0 -t 2 -g {gamma/1000} -c {C}')
    m = svm_train(prob, param)
    print(f'gamma is {gamma/1000} and C is {C}')
    p_label, p_acc, p_val = svm_predict(validation_Y, validation_X, m)
    p = p_acc[0]
    print(f'p is {p}')
    print(f'gamma is {gamma/1000}')
    print(f'C is {C}')
    if p > Best_p:
      Best_p = p
      Best_C = C
      Best_gamma = gamma/1000
print(f'Highest precision is {Best_p}.')
print(f'Best C is {Best_C}.')
print(f'Best gamma is {Best_gamma}.')

"""Setting the final parameter """

print("If you want to set a new C, press c")
print("If you want to set a new gamma, press g")
print("If you want to set both gamma and c, press t")
print("Otherwise, press any key.")
print("key: ")
word = input()
if word == 'c' or word == 'C':
  print("Enter the new c.")
  print("c: ")
  c = int(input())
elif word == 'g' or word == 'G':
  print("Enter the new gamma.")
  print("g: ")
  g = float(input())
elif word == 't' or word == 'T':
  print("Enter the new c.")
  print("c: ")
  c = int(input())
  print("Enter the new gamma.")
  print("g: ")
  g = float(input())
else:
  c = Best_C
  g = Best_gamma

"""Final Result"""

prob  = svm_problem(train_Y, train_X)
param = svm_parameter(f'-s 0 -t 2 -g {g} -c {c} -b 1')
m = svm_train(prob, param)

p_label, p_acc, p_val = svm_predict(train_Y, train_X, m,  options='-b 1')
p_label, p_acc, p_val = svm_predict(validation_Y, validation_X, m,  options='-b 1')
p_label, p_acc, p_val = svm_predict(test_Y, test_X, m,  options='-b 1')